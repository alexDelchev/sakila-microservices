plugins {
  id 'java'
  id 'org.hidetake.swagger.generator' version '2.19.2'
  id 'org.springframework.boot' version '3.0.2'
}

group = 'com.example.sakila'
version = '1.0-SNAPSHOT'
description = 'sakila-film-service'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  apiSpec
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web:2.7.8'
  implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.8'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.7.8'
  implementation 'co.elastic.clients:elasticsearch-java:8.6.0'
  implementation 'io.swagger:swagger-annotations:1.5.17'
  implementation 'io.springfox:springfox-swagger2:2.7.0'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.4'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
  implementation 'com.fasterxml.jackson.core:jackson-core:2.13.4'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4'
  implementation 'com.google.code.gson:gson:2.10.1'
  implementation 'org.mongodb:mongo-java-driver:3.12.11'
  implementation 'org.springframework.kafka:spring-kafka:2.9.5'

  testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.8'

  apiSpec 'com.example.sakila:sakila-film-api-spec:1.0-SNAPSHOT'
  swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.29'
}

swaggerSources {
  server {
    inputFile = file "$buildDir/api-spec/open-api-specification.json"
    code {
      language = 'spring'
      configFile = file "$projectDir/swagger-codegen-config.json"
      components = ['models', 'apis']
    }
  }
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java', "${swaggerSources.server.code.outputDir}/src/main/java"]
    }
  }
}

test {
  useJUnitPlatform()
}

tasks.register('unpackApiSpec', Sync) {
  dependsOn configurations.apiSpec

  from {
    configurations.apiSpec.collect { zipTree(it) }
  }
  into "$buildDir/api-spec"
}

tasks.register('buildDockerImage', Exec) {
  def dockerFile = "Dockerfile"
  def tag = "${project.group}/${project.name}:${project.version}"
  def context = "."
  def jarFile = "./build/libs/${project.name}-${project.version}.jar"

  commandLine 'docker', 'build',
      '-f', "${dockerFile}",
      '-t', "${tag}",
      "${context}",
      '--build-arg', "JAR_FILE=${jarFile}"
}

tasks.named('build') {
  finalizedBy 'buildDockerImage'
}

swaggerSources.server.code.dependsOn unpackApiSpec
compileJava.dependsOn swaggerSources.server.code

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
  options.encoding = 'UTF-8'
}
