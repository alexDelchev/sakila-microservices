version: '2.1'

networks:
  sakila-postgres-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 176.18.0.0/24
          ip_range: 176.18.0.0/24
          gateway: 176.18.0.254
  sakila-mongodb-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 176.18.1.0/24
          ip_range: 176.18.1.0/24
          gateway: 176.18.1.254
  sakila-backend-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 176.18.2.0/24
          ip_range: 176.18.2.0/24
          gateway: 176.18.2.254
  sakila-frontend-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 176.18.3.0/24
          ip_range: 176.18.3.0/24
          gateway: 176.18.3.254

services:
  sakila-zookeeper:
    image: com.example.sakila/sakila-zookeeper:1.0-SNAPSHOT
    container_name: sakila-zookeeper
    mem_limit: 512m
    networks:
      - sakila-backend-network
    ports:
      - '2181:2181'
    restart: always
  sakila-kafka:
    image: com.example.sakila/sakila-kafka:1.0-SNAPSHOT
    container_name: sakila-kafka
    mem_limit: 512m
    depends_on:
      - sakila-zookeeper
    networks:
      - sakila-backend-network
    ports:
      - '9092:9092'
      - '9093:9093'
    restart: always
  sakila-postgres:
    image: com.example.sakila/sakila-postgres:1.0-SNAPSHOT
    container_name: sakila-postgres
    mem_limit: 512m
    networks:
      - sakila-postgres-network
    ports:
      - '30678:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U health -d sakila_store_write" ]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: always
  sakila-mongodb:
    image: com.example.sakila/sakila-mongodb:1.0-SNAPSHOT
    container_name: sakila-mongodb
    mem_limit: 512m
    networks:
      - sakila-mongodb-network
    ports:
      - '30777:27017'
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u sakila_dba -p sakila_dba_pass --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
    restart: always
  sakila-redis:
    image: redis/redis-stack-server:7.0.6-RC4
    mem_limit: 512M
    ports:
      - '30379:6379'
    networks:
      - sakila-backend-network
    restart: always
  sakila-elastic-search:
    image: elasticsearch:8.6.0
    container_name: sakila-elastic-search
    mem_limit: 512m
    networks:
      - sakila-backend-network
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
  sakila-discovery-service:
    image: com.example.sakila/sakila-discovery-service:1.0-SNAPSHOT
    container_name: sakila-discovery-service
    mem_limit: 512M
    networks:
      - sakila-backend-network
    ports:
      - '30761:8761'
    restart: always
  sakila-api-gateway:
    image: com.example.sakila/sakila-api-gateway:1.0-SNAPSHOT
    container_name: sakila-api-gateway
    mem_limit: 512M
    depends_on:
      - sakila-discovery-service
    networks:
      - sakila-backend-network
      - sakila-frontend-network
    ports:
      - '30999:8999'
    command: --spring.profiles.active=docker-secrets
    restart: always
  sakila-address-service:
    image: com.example.sakila/sakila-address-service:1.0-SNAPSHOT
    container_name: sakila-address-service
    mem_limit: 512M
    depends_on:
      sakila-discovery-service:
        condition: service_started
      sakila-postgres:
        condition: service_healthy
    networks:
      - sakila-backend-network
      - sakila-postgres-network
    ports:
      - '30000:9000'
    command: --spring.profiles.active=docker-secrets
    restart: always
  sakila-film-service:
    image: com.example.sakila/sakila-film-service:1.0-SNAPSHOT
    container_name: sakila-film-service
    mem_limit: 512M
    depends_on:
      sakila-discovery-service:
        condition: service_started
      sakila-mongodb:
        condition: service_healthy
      sakila-redis:
        condition: service_started
      sakila-elastic-search:
        condition: service_started
    networks:
      - sakila-backend-network
      - sakila-mongodb-network
    ports:
      - '30001:9000'
    command: --spring.profiles.active=docker-secrets
    restart: always
  sakila-payment-service:
    image: com.example.sakila/sakila-payment-service:1.0-SNAPSHOT
    container_name: sakila-payment-service
    mem_limit: 512M
    depends_on:
      sakila-discovery-service:
        condition: service_started
      sakila-postgres:
        condition: service_healthy
    networks:
      - sakila-backend-network
      - sakila-postgres-network
    ports:
      - '30002:9000'
    command: --spring.profiles.active=docker-secrets
    restart: always
  sakila-store-write-service:
    image: com.example.sakila/sakila-store-write-service:1.0-SNAPSHOT
    container_name: sakila-store-write-service
    mem_limit: 512M
    depends_on:
      sakila-discovery-service:
        condition: service_started
      sakila-postgres:
        condition: service_healthy
      sakila-kafka:
        condition: service_started
    networks:
      - sakila-backend-network
      - sakila-postgres-network
    ports:
      - '30003:9000'
    command: --spring.profiles.active=docker-secrets
    restart: always
  sakila-store-read-service:
    image: com.example.sakila/sakila-store-read-service:1.0-SNAPSHOT
    container_name: sakila-store-read-service
    mem_limit: 512M
    depends_on:
      sakila-discovery-service:
        condition: service_started
      sakila-postgres:
        condition: service_healthy
      sakila-store-write-service:
        condition: service_started
      sakila-kafka:
        condition: service_started
    networks:
      - sakila-backend-network
      - sakila-postgres-network
    ports:
      - '30004:9000'
    command: --spring.profiles.active=docker-secrets
    restart: always
  sakila-frontend:
    image: com.example.sakila/sakila-frontend:1.0-SNAPSHOT
    container_name: sakila-frontend
    mem_limit: 512M
    depends_on:
      - sakila-discovery-service
      - sakila-api-gateway
    networks:
      - sakila-frontend-network
    ports:
      - '30080:80'
    restart: always
